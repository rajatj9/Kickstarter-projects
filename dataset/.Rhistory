which.min(subsets.summary$cp)
which.min(subsets.summary$bic)
which.max(subsets.summary$adjr2)
plot(subsets.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(4, subsets.summary$cp[4],col = "red")
plot(subsets.summary$bic, xlab = "Size of the Subset", ylab = "CP", type ="l")
points(4, subsets.summary$bic[4],col = "red")
plot(subsets.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(4, subsets.summary$bic[4],col = "red")
plot(subsets.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(8, subsets.summary$adjr2[8],col = "red")
coefficients(subsets, id = 4)
coefficients(subsets, id = 8)
plot(subsets, scale="Cp")
plot(subsets, scale="bic")
plot(subsets, scale="adjr2")
plot(subsets, scale="Cp")
plot(subsets, scale="bic")
plot(subsets, scale="bic")
plot(subsets, scale="adjr2")
coefficients(subsets, id = 4)
coefficients(subsets, id = 8)
#Part D
subsets.fwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "forward")
subsets.fwd.summary = summary(subsets.fwd)
subsets.fwd.summary
which.min(subsets.fwd.summary$cp)
which.min(subsets.fwd.summary$bic)
which.max(subsets.fwd.summary$adjr2)
plot(subsets.fwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(4, subsets.fwd.summary$cp[4],col = "red")
plot(subsets.fwd.summary$bic, xlab = "Size of the Subset", ylab = "CP", type ="l")
points(3, subsets.fwd.summary$bic[3],col = "red")
plot(subsets.fwd.summary$adjr2, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(4, subsets.fwd.summary$adjr2[4],col = "red")
coefficients(subsets, id = 4)
plot(subsets.fwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(4, subsets.fwd.summary$cp[4],col = "red")
plot(subsets.fwd.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.fwd.summary$bic[3],col = "red")
plot(subsets.fwd.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(4, subsets.fwd.summary$adjr2[4],col = "red")
#Part D
subsets.fwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "forward")
subsets.fwd.summary = summary(subsets.fwd)
subsets.fwd.summary
which.min(subsets.fwd.summary$cp)
which.min(subsets.fwd.summary$bic)
which.max(subsets.fwd.summary$adjr2)
plot(subsets.fwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(4, subsets.fwd.summary$cp[4],col = "red")
plot(subsets.fwd.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
plot(subsets.fwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(4, subsets.fwd.summary$cp[4],col = "red")
plot(subsets.fwd.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(4, subsets.fwd.summary$bic[4],col = "red")
plot(subsets.fwd.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(9, subsets.fwd.summary$adjr2[9],col = "red")
coefficients(subsets, id = 4)
coefficients(subsets, id = 9)
#Part D
subsets.fwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "forward")
subsets.fwd.summary = summary(subsets.fwd)
which.min(subsets.fwd.summary$cp)
which.min(subsets.fwd.summary$bic)
which.max(subsets.fwd.summary$adjr2)
library(leaps)
library(glmnet)
# Part A
X = rnorm(100)
e = rnorm(100)
X
e
# Part B
Y = 1 + X + X*X + X*X*X + e
data.new = data.frame(y = Y, x = X)
plot(data.new)
# Part C
subsets = regsubsets(y~poly(x,10, raw = TRUE),data = data.new,nvmax = 10)
subsets.summary = summary(subsets)
which.min(subsets.summary$cp)
which.min(subsets.summary$bic)
which.max(subsets.summary$adjr2)
library(leaps)
library(glmnet)
# Part A
X = rnorm(100)
e = rnorm(100)
X
e
# Part B
Y = 1 + X + X*X + X*X*X + e
data.new = data.frame(y = Y, x = X)
plot(data.new)
# Part C
subsets = regsubsets(y~poly(x,10, raw = TRUE),data = data.new,nvmax = 10)
subsets.summary = summary(subsets)
which.min(subsets.summary$cp)
which.min(subsets.summary$bic)
which.max(subsets.summary$adjr2)
set.seed(5462)
library(leaps)
library(glmnet)
# Part A
X = rnorm(100)
e = rnorm(100)
X
e
# Part C
subsets = regsubsets(y~poly(x,10, raw = TRUE),data = data.new,nvmax = 10)
subsets.summary = summary(subsets)
which.min(subsets.summary$cp)
which.min(subsets.summary$bic)
which.max(subsets.summary$adjr2)
par(mfrow=c(2,2))
plot(subsets.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(4, subsets.summary$cp[4],col = "red")
plot(subsets.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(4, subsets.summary$bic[4],col = "red")
plot(subsets.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(8, subsets.summary$adjr2[8],col = "red")
par(mfrow=c(2,2))
plot(subsets.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(4, subsets.summary$cp[4],col = "red")
plot(subsets.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.summary$cp[3],col = "red")
par(mfrow=c(2,2))
plot(subsets.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.summary$cp[3],col = "red")
plot(subsets.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.summary$bic[3],col = "red")
plot(subsets.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(5, subsets.summary$adjr2[5],col = "red")
par(mfrow=c(2,2))
plot(subsets, scale="Cp")
plot(subsets, scale="bic")
plot(subsets, scale="adjr2")
coefficients(subsets, id = 3)
coefficients(subsets, id = 5)
#Part D
subsets.fwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "forward")
subsets.fwd.summary = summary(subsets.fwd)
which.min(subsets.fwd.summary$cp)
which.min(subsets.fwd.summary$bic)
which.max(subsets.fwd.summary$adjr2)
par(mfrow=c(2,2))
plot(subsets.fwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
par(mfrow=c(2,2))
plot(subsets.fwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.fwd.summary$cp[3],col = "red")
plot(subsets.fwd.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.fwd.summary$bic[3],col = "red")
plot(subsets.fwd.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(3, subsets.fwd.summary$adjr2[3],col = "red")
coefficients(subsets, id = 3)
coefficients(subsets, id = 3)
subsets.bwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "backward")
subsets.bwd.summary = summary(subsets.fwd)
subsets.bwd.summary
which.min(subsets.bwd.summary$cp)
which.min(subsets.bwd.summary$bic)
which.max(subsets.bwd.summary$adjr2)
subsets.bwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "backward")
subsets.bwd.summary = summary(subsets.fwd)
which.min(subsets.bwd.summary$cp)
which.min(subsets.bwd.summary$bic)
which.max(subsets.bwd.summary$adjr2)
par(mfrow=c(2,2))
plot(subsets.bwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
plot(subsets.bwd.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(3, subsets.bwd.summary$adjr2[3],col = "red")
par(mfrow=c(2,2))
plot(subsets.bwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.bwd.summary$cp[3],col = "red")
plot(subsets.bwd.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.bwd.summary$bic[3],col = "red")
plot(subsets.bwd.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(3, subsets.bwd.summary$adjr2[3],col = "red")
coefficients(subsets, id = 3)
coefficients(subsets.fwd, id = 3)
coefficients(subsets.fwd, id = 3)
coefficients(subsets.bwd, id = 3)
# Part E
lasso.cv = cv.glmnet(poly(X,10,raw=T),Y,alpha=1)
summary(lasso.cv)
lambda = lasso.cv$lambda.min
plot(lasso.cv)
predict(lasso.cv, s=lambda, type="coefficients")
#Part F
Y2 = 1 + 1*X^7 + e
# Part E
lasso.cv = cv.glmnet(poly(X,10,raw=T),Y,alpha=1)
summary(lasso.cv)
lambda = lasso.cv$lambda.min
plot(lasso.cv)
predict(lasso.cv, s=lambda, type="coefficients")
# Part E
par(mfrow=c(1,1))
lasso.cv = cv.glmnet(poly(X,10,raw=T),Y,alpha=1)
summary(lasso.cv)
lambda = lasso.cv$lambda.min
plot(lasso.cv)
predict(lasso.cv, s=lambda, type="coefficients")
lasso.cv = cv.glmnet(poly(X,10,raw=T),Y,alpha=1)
lambda = lasso.cv$lambda.min
plot(lasso.cv)
lasso.cv = cv.glmnet(poly(X,10,raw=T),Y,alpha=1)
lambda = lasso.cv$lambda.min
plot(lasso.cv)
predict(lasso.cv, s=lambda, type="coefficients")
# Part E
par(mfrow=c(1,1))
lasso.cv = cv.glmnet(poly(X,10,raw=T),Y,alpha=1)
lambda = lasso.cv$lambda.min
plot(lasso.cv)
predict(lasso.cv, s=lambda, type="coefficients")
# Part E
par(mfrow=c(1,1))
lasso.cv = cv.glmnet(poly(X,10,raw=T),Y,alpha=1)
lambda = lasso.cv$lambda.min
plot(lasso.cv)
predict(lasso.cv, s=lambda, type="coefficients")
# Part E
xmat = model.matrix(y ~ poly(x, 10, raw = T), data = data.new)[, -1]
lasso.mod = cv.glmnet(xmat, Y, alpha = 1)
best.lambda = lasso.mod$lambda.min
best.lambda
plot(mod.lasso)
plot(lasso.mod)
best.model = glmnet(xmat, Y, alpha = 1)
predict(best.model, s = best.lambda, type = "coefficients")
#Part F
Y2 = 1 + X^7 + e
data.new = data.frame(y = Y2, x = X)
regfit.7 <- regsubsets(y~poly(x,10,raw=T), data=data.new, nvmax=10)
reg.summary = summary(regfit.7)
which.min(reg.summary$cp)
which.min(reg.summary$bic)
which.min(reg.summary$adjr2)
#Part F
Y2 = 1 + X^7 + e
data.new = data.frame(y = Y2, x = X)
regfit.7 <- regsubsets(y~poly(x,10,raw=T), data=data.new, nvmax=10)
reg.summary = summary(regfit.7)
which.min(reg.summary$cp)
which.min(reg.summary$bic)
which.min(reg.summary$adjr2)
xmat = model.matrix(y ~ poly(x, 10, raw = T), data = data.full)[, -1]
xmat = model.matrix(y ~ poly(x, 10, raw = T), data = data.new)[, -1]
mod.lasso = cv.glmnet(xmat, Y, alpha = 1)
best.lambda = mod.lasso$lambda.min
best.lambda
best.model = glmnet(xmat, Y, alpha = 1)
predict(best.model, s = best.lambda, type = "coefficients")
#Part F
Y2 = 1 + X^7 + e
data.new = data.frame(y = Y2, x = X)
regfit.7 <- regsubsets(y~poly(x,10,raw=T), data=data.new, nvmax=10)
reg.summary = summary(regfit.7)
which.min(reg.summary$cp)
which.min(reg.summary$bic)
which.min(reg.summary$adjr2)
xmat = model.matrix(y ~ poly(x, 10, raw = T), data = data.new)[, -1]
mod.lasso = cv.glmnet(xmat, Y, alpha = 1)
best.lambda = mod.lasso$lambda.min
best.lambda
best.model = glmnet(xmat, Y, alpha = 1)
predict(best.model, s = best.lambda, type = "coefficients")
set.seed(5462)
library(leaps)
library(glmnet)
# Part A
X = rnorm(100)
e = rnorm(100)
X
e
# Part B
Y = 1 + X + X*X + X*X*X + e
data.new = data.frame(y = Y, x = X)
plot(data.new)
# Part C
subsets = regsubsets(y~poly(x,10, raw = TRUE),data = data.new,nvmax = 10)
subsets.summary = summary(subsets)
which.min(subsets.summary$cp)
which.min(subsets.summary$bic)
which.max(subsets.summary$adjr2)
par(mfrow=c(2,2))
plot(subsets.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.summary$cp[3],col = "red")
plot(subsets.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.summary$bic[3],col = "red")
plot(subsets.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(5, subsets.summary$adjr2[5],col = "red")
coefficients(subsets, id = 3)
coefficients(subsets, id = 5)
par(mfrow=c(2,2))
plot(subsets, scale="Cp")
plot(subsets, scale="bic")
plot(subsets, scale="adjr2")
#Part D
subsets.fwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "forward")
subsets.fwd.summary = summary(subsets.fwd)
which.min(subsets.fwd.summary$cp)
which.min(subsets.fwd.summary$bic)
which.max(subsets.fwd.summary$adjr2)
par(mfrow=c(2,2))
plot(subsets.fwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.fwd.summary$cp[3],col = "red")
plot(subsets.fwd.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.fwd.summary$bic[3],col = "red")
plot(subsets.fwd.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(3, subsets.fwd.summary$adjr2[3],col = "red")
coefficients(subsets.fwd, id = 3)
subsets.bwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "backward")
subsets.bwd.summary = summary(subsets.fwd)
which.min(subsets.bwd.summary$cp)
which.min(subsets.bwd.summary$bic)
which.max(subsets.bwd.summary$adjr2)
par(mfrow=c(2,2))
plot(subsets.bwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.bwd.summary$cp[3],col = "red")
plot(subsets.bwd.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.bwd.summary$bic[3],col = "red")
plot(subsets.bwd.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(3, subsets.bwd.summary$adjr2[3],col = "red")
coefficients(subsets.bwd, id = 3)
# Part E
xmat = model.matrix(y ~ poly(x, 10, raw = T), data = data.new)[, -1]
lasso.mod = cv.glmnet(xmat, Y, alpha = 1)
best.lambda = lasso.mod$lambda.min
best.lambda
plot(lasso.mod)
best.model = glmnet(xmat, Y, alpha = 1)
predict(best.model, s = best.lambda, type = "coefficients")
#Part F
Y2 = 1 + X^7 + e
data.new = data.frame(y = Y2, x = X)
regfit.7 <- regsubsets(y~poly(x,10,raw=T), data=data.new, nvmax=10)
reg.summary = summary(regfit.7)
which.min(reg.summary$cp)
which.min(reg.summary$bic)
which.min(reg.summary$adjr2)
xmat = model.matrix(y ~ poly(x, 10, raw = T), data = data.new)[, -1]
lasso.mod = cv.glmnet(xmat, Y, alpha = 1)
best.lambda = lasso.mod$lambda.min
best.lambda
best.model = glmnet(xmat, Y, alpha = 1)
predict(best.model, s = best.lambda, type = "coefficients")
xmat = model.matrix(y ~ poly(x, 10, raw = T), data = data.new)[, -1]
lasso.mod = cv.glmnet(xmat, Y, alpha = 1)
best.lambda = lasso.mod$lambda.min
best.lambda
best.model = glmnet(xmat, Y, alpha = 1)
predict(best.model, s = best.lambda, type = "coefficients")
library(leaps)
library(glmnet)
# Part A
X = rnorm(100)
e = rnorm(100)
X
e
# Part B
Y = 1 + X + X*X + X*X*X + e
data.new = data.frame(y = Y, x = X)
plot(data.new)
# Part C
subsets = regsubsets(y~poly(x,10, raw = TRUE),data = data.new,nvmax = 10)
subsets.summary = summary(subsets)
which.min(subsets.summary$cp)
which.min(subsets.summary$bic)
which.max(subsets.summary$adjr2)
par(mfrow=c(2,2))
plot(subsets.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.summary$cp[3],col = "red")
plot(subsets.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.summary$bic[3],col = "red")
plot(subsets.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(5, subsets.summary$adjr2[5],col = "red")
coefficients(subsets, id = 3)
coefficients(subsets, id = 5)
par(mfrow=c(2,2))
plot(subsets, scale="Cp")
plot(subsets, scale="bic")
plot(subsets, scale="adjr2")
#Part D
subsets.fwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "forward")
subsets.fwd.summary = summary(subsets.fwd)
which.min(subsets.fwd.summary$cp)
which.min(subsets.fwd.summary$bic)
which.max(subsets.fwd.summary$adjr2)
par(mfrow=c(2,2))
plot(subsets.fwd.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.fwd.summary$cp[3],col = "red")
plot(subsets.fwd.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.fwd.summary$bic[3],col = "red")
plot(subsets.fwd.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(3, subsets.fwd.summary$adjr2[3],col = "red")
coefficients(subsets.fwd, id = 3)
subsets.bwd = regsubsets(y~poly(x,10, raw = TRUE), data = data.new, nvmax=10, method = "backward")
subsets.bwd.summary = summary(subsets.fwd)
which.min(subsets.bwd.summary$cp)
which.min(subsets.bwd.summary$bic)
which.max(subsets.bwd.summary$adjr2)
par(mfrow=c(2,2))
set.seed(5462)
library(leaps)
library(glmnet)
# Part A
X = rnorm(100)
e = rnorm(100)
X
e
# Part B
Y = 1 + X + X*X + X*X*X + e
data.new = data.frame(y = Y, x = X)
plot(data.new)
# Part C
subsets = regsubsets(y~poly(x,10, raw = TRUE),data = data.new,nvmax = 10)
subsets.summary = summary(subsets)
which.min(subsets.summary$cp)
which.min(subsets.summary$bic)
which.max(subsets.summary$adjr2)
par(mfrow=c(2,2))
plot(subsets.summary$cp, xlab = "Size of the Subset", ylab ="CP", type = "l")
points(3, subsets.summary$cp[3],col = "red")
plot(subsets.summary$bic, xlab = "Size of the Subset", ylab = "BIC", type ="l")
points(3, subsets.summary$bic[3],col = "red")
plot(subsets.summary$adjr2, xlab = "Size of the Subset", ylab ="ADJR2", type = "l")
points(5, subsets.summary$adjr2[5],col = "red")
coefficients(subsets, id = 3)
coefficients(subsets, id = 5)
par(mfrow=c(2,2))
plot(subsets, scale="Cp")
plot(subsets, scale="bic")
plot(subsets, scale="adjr2")
set.seed(5462)
library(leaps)
library(glmnet)
# Part A
X = rnorm(100)
e = rnorm(100)
X
e
# Part B
Y = 1 + X + X*X + X*X*X + e
data.new = data.frame(y = Y, x = X)
plot(data.new)
# Part C
subsets = regsubsets(y~poly(x,10, raw = TRUE),data = data.new,nvmax = 10)
subsets.summary = summary(subsets)
which.min(subsets.summary$cp)
which.min(subsets.summary$bic)
which.max(subsets.summary$adjr2)
Is rishi saying columbia
i dont think so
is he applying
abe
pre reqs
most prob not
did he talk about pre reqs
because I am not sure if pre reqs apply tous
kaha toh nahi
ek baar phirse puchta hu
ritvik ko bolunga
library(SuperLearner)
library(e1071)
library(leaps)
library(tree)
library(randomForest)
set.seed(3354)
setwd("/Users/pranavtalwar/Desktop/Kickstarter-projects/dataset")
data= read.csv("fixed_data1.csv")
nrow(data)
str(data)
data = data[,-1]
data[, 6] = sapply(data[, 6], as.character)
for (i in 1:nrow(data)){
if(data$country[i]!="US")
{
data$country[i] = "Other"
}
}
data[, 6] = sapply(data[, 6], as.factor)
data$launch_month = as.factor(data$launch_month)
data$deadline_month = as.factor(data$deadline_month)
data$country = as.numeric(as.factor(data$country))
data$location.type = as.numeric(as.factor(data$location.type))
data$staff_pick = as.numeric(as.factor(data$staff_pick))
data$is_starrable = as.numeric(as.factor(data$is_starrable))
data$creator_has_slug = as.numeric(as.factor(data$creator_has_slug))
str(data)
summary(data)
View(data)
train = sample(nrow(data), nrow(data)*0.7)
data_train = data[train,]
data_test = data[-train,]
nrow(data_test)
nrow(data_train)
summary(data)
#logistic regression model - validation test
names(data)
log.mod = glm(state~parent_category+funding_duration_days+pre_funding_duration_days+country+staff_pick+creator_has_slug+blurb_length+blurb_word_count+name_word_count+usd_goal,data = data_train,family = "binomial")
preds = predict(log.mod,data_test, type = "response")
preds2 = predict(log.mod, data_train, type = "response")
options(scipen=999)
preds[preds>=0.5] = "successful"
preds[preds<0.5] = "failed"
preds2[preds2>=0.5] = "successful"
preds2[preds2<0.5] = "failed"
table(preds, data_test$state)
table(preds2, data_train$state)
(12732+24136)/(nrow(data_test))
